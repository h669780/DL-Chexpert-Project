import gradio as gr
from tensorflow.keras.models import load_model
from focal_loss import BinaryFocalLoss
from tensorflow.keras.preprocessing import image
import numpy as np
from tensorflow.keras.metrics import AUC
from tensorflow.keras import backend as K
import matplotlib.pyplot as plt
import cv2
import tensorflow as tf

# Load model
model = load_model("none_freeze.keras", custom_objects={"BinaryFocalLoss": BinaryFocalLoss, "AUC": AUC})
labels = ["Pleural Effusion", "Edema", "Cardiomegaly"]
last_conv_layer_name = "conv5_block16_2_conv"  # Adjust if needed
best_thresholds = [0.75, 0.70, 0.73]


# Prediction logic
def predict(img):
    img_resized = img.resize((256, 256))
    x = np.array(img_resized) / 255.0
    x = np.expand_dims(x, axis=0)
    preds = model.predict(x)[0]
    return {labels[i]: float(preds[i]) for i in range(3)}

# Grad-CAM
def make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):
    grad_model = tf.keras.models.Model([model.inputs], [model.get_layer(last_conv_layer_name).output, model.output])
    with tf.GradientTape() as tape:
        last_conv_output, preds = grad_model(img_array)
        if pred_index is None:
            pred_index = tf.argmax(preds[0])
        class_channel = preds[:, pred_index]

    grads = tape.gradient(class_channel, last_conv_output)
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))
    last_conv_output = last_conv_output[0]
    heatmap = last_conv_output @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)
    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)
    return heatmap.numpy()

# Wrapper
def get_prediction_and_heatmap(img):
    preds = predict(img)

    img_resized = img.resize((256, 256))
    x = np.array(img_resized) / 255.0
    x = np.expand_dims(x, axis=0)

    heatmap = make_gradcam_heatmap(x, model, last_conv_layer_name)
    heatmap_resized = cv2.resize(heatmap, (img.width, img.height))
    heatmap_colored = np.uint8(255 * plt.cm.jet(heatmap_resized)[:, :, :3])
    heatmap_colored = image.array_to_img(heatmap_colored)
    superimposed_img = image.array_to_img(np.array(img) * 0.6 + np.array(heatmap_colored) * 0.4)

    diagnosis = list(preds.items())
    diagnosis.sort(key=lambda x: x[1], reverse=True)
    likely_label, confidence = diagnosis[0]

    summary = (
        f"### Diagnosis Summary\n"
        f"**Most likely:** {likely_label}\n\n"
        f"**Confidence:** {confidence*100:.2f}%\n\n"
        f"*Note: This prediction is generated by an AI model trained on CheXpert data and should not be used for clinical "
        f"decision-making without review by a medical professional.*"
    )

    # Add threshold-based status (Positive/Uncertain/Negative)
    threshold_info = {
        label: (
            f"Positive" if preds[label] >= best_thresholds[i] + 0.1 else
            f"Uncertain" if best_thresholds[i] - 0.1 <= preds[label] < best_thresholds[i] + 0.1 else
            f"Negative"
        ) for i, label in enumerate(labels)
    }

    # Modify predictions to include status
    pred_with_status = {
        f"{label} ({threshold_info[label]})": round(preds[label], 2) for label in labels
    }

    return superimposed_img, pred_with_status, summary


# Launch using Blocks for layout control
with gr.Blocks(title="CheXpert Disease Classifier") as demo:
    gr.Markdown("# CheXpert Disease Classifier")
    gr.Markdown(
        "Upload a chest X-ray image to predict signs of Pleural Effusion, Edema, or Cardiomegaly. "
        "This demo uses a DenseNet-based model trained on the CheXpert dataset. "
        "Alongside predictions, it provides Grad-CAM visualizations and summary cards to help interpret where the model focused."
    )

    with gr.Row():
        with gr.Column():
            input_image = gr.Image(type="pil", label="Input Image")
            example_box = gr.Examples(
                examples=[
                    ["examples/edema.jpg"],
                    ["examples/effusion.jpg"],
                    ["examples/cardiomegaly.jpg"],
                    ["examples/negative.jpg"],
                    ["examples/random_image_1.jpg"],
                    ["examples/random_image_2.jpg"]
                ],
                inputs=input_image,
                label="Example Images"
            )
            submit_btn = gr.Button("Submit")

        with gr.Column():
            gradcam_output = gr.Image(label="Grad-CAM Overlay")
            gr.Markdown(
                "**Grad-CAM Overlay**: This visualization highlights areas in the X-ray where the model focused most when making its prediction."
            )


    with gr.Row():
        prediction_output = gr.Label(num_top_classes=3, label="Prediction Results")
        summary_output = gr.Markdown(label="Diagnosis Summary")


    submit_btn.click(
        fn=get_prediction_and_heatmap,
        inputs=input_image,
        outputs=[gradcam_output, prediction_output, summary_output]
    )

demo.launch(share=False)
